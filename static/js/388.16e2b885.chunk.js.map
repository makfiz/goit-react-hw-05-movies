{"version":3,"file":"static/js/388.16e2b885.chunk.js","mappings":"mTAEMA,EAAU,mCACVC,EAAW,KACjBC,EAAAA,GAAAA,SAAAA,QAAyB,gCAIjB,IAAMC,EAAmB,mCAAG,6GAAOC,EAAP,+BAAc,EAAGC,EAAjB,0CAGPH,EAAAA,EAAAA,IAAM,qBAAsB,CACjDG,OAAAA,EACAC,OAAQ,CACNC,QAASP,EACTC,SAAUA,EACVG,KAAMA,KARoB,uBAGtBI,EAHsB,EAGtBA,KAHsB,kBAYvBA,GAZuB,wCAcxB,IAAIC,MAAM,KAAEC,SAdY,0DAAH,qDAkBlBC,EAAgB,mCAAG,WAAOC,EAAaP,GAApB,mGAGLH,EAAAA,EAAAA,IAAM,eAAgB,CAC3CG,OAAAA,EACAC,OAAQ,CACNC,QAASP,EACTa,MAAOD,EACPX,SAAUA,EACVG,KAAM,KATkB,uBAGpBI,EAHoB,EAGpBA,KAHoB,kBAmBrBA,EAAKM,SAnBgB,sCAqBtB,IAAIL,MAAM,KAAEC,SArBU,yDAAH,wDAyBfK,EAAoB,mCAAG,WAAOC,GAAP,mGAGVd,EAAAA,EAAAA,IAAM,SAAD,OAAUc,GAAM,CAC1CV,OAAQ,CACNC,QAASP,EACTC,SAAUA,KANmB,uBAGzBO,EAHyB,EAGzBA,KAHyB,kBAW1BA,GAX0B,sCAa3B,IAAIC,MAAM,KAAEC,SAbe,yDAAH,sDAiBnBO,EAAsB,mCAAG,WAAOD,GAAP,mGAGbd,EAAAA,EAAAA,IAAM,SAAD,OAAUc,EAAV,YAAwB,CAClDV,OAAQ,CACNC,QAASP,EACTC,SAAUA,KANsB,uBAG5BO,EAH4B,EAG5BA,KAH4B,kBAW7BA,GAX6B,sCAa9B,IAAIC,MAAM,KAAEC,SAbkB,yDAAH,sDAiBtBQ,EAAqB,mCAAG,WAAOF,GAAP,mGAGZd,EAAAA,EAAAA,IAAM,SAAD,OAAUc,EAAV,YAAwB,CAClDV,OAAQ,CACNC,QAASP,EACTC,SAAUA,KANqB,uBAG3BO,EAH2B,EAG3BA,KAH2B,kBAW5BA,GAX4B,sCAa7B,IAAIC,MAAM,KAAEC,SAbiB,yDAAH,qD,qKCnFzBS,EAAWC,EAAAA,GAAAA,GAAH,gSAYRC,EAASD,EAAAA,GAAAA,IAAH,oEAINE,EAAWF,EAAAA,GAAAA,GAAH,oG,SC4BrB,EAvCa,WACT,OAAwBG,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,GAdAE,QAAQC,IAAIH,IACZI,EAAAA,EAAAA,YAAU,WAAM,wCACZ,8GAE+Bb,EAAAA,EAAAA,IAAuBS,GAFtD,OAEcK,EAFd,OAGQN,EAAQM,EAASP,MAHzB,gDAMQI,QAAQI,MAAR,MANR,0DADY,uBAAC,WAAD,wBAUbC,EACF,GAAE,CAACP,IAECF,EACL,OACI,SAACL,EAAD,UACKK,GAAQA,EAAKU,KAAI,SAAAC,GAEd,IAAOC,EAAiCD,EAAjCC,aAAcC,EAAmBF,EAAnBE,KAAMC,EAAaH,EAAbG,UACvBC,EACiB,OAAjBH,EACE,qEADF,0CAEyCA,GAE9C,OACC,UAACd,EAAD,YACI,SAACD,EAAD,CAAQmB,IAAKD,EAAOE,IAAKJ,KACtB,0BAAOA,KACP,0CAAkBC,OAHVD,EAKlB,KAGZ,C","sources":["ApiServise/api.themoviedb.js","components/MovieDetails/Cast/Cast.styled.jsx","components/MovieDetails/Cast/Cast.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'e4c439da3c1d90110fb4595b6236c9fe';\nconst language = 'en'\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n\n\n export const fetchTrendingMovies = async (page = 1, signal) => {\n    try {\n\n      const { data } = await axios('trending/movie/day', {\n        signal,\n        params: {\n          api_key: API_KEY,\n          language: language,\n          page: page,\n        },\n      });\n    \n      return data;\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  }\n\n export const  fetchSearchMovie = async (searchQuery, signal) => {\n    try {\n    \n      const { data } = await axios('search/movie', {\n        signal,\n        params: {\n          api_key: API_KEY,\n          query: searchQuery,\n          language: language,\n          page: 1,\n        },\n      });\n     \n\n    //   if (this.searchQuery === '') {\n    //     return;\n    //   }\n    //   this.total_pages = data.total_pages;\n\n      return data.results;\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  }\n\n  export const  fetchSearchMovieById = async (id) => {\n    try {\n    \n      const { data } = await axios(`movie/${id}`, {\n        params: {\n          api_key: API_KEY,\n          language: language,\n        },\n      });\n      \n\n      return data;\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  }\n\n   export const  fetchMovieCreditshById = async (id) => {\n    try {\n    \n      const { data } = await axios(`movie/${id}/credits`, {\n        params: {\n          api_key: API_KEY,\n          language: language,\n        },\n      });\n      \n\n      return data;\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  }\n\n   export const  fetchMovieReviewsById = async (id) => {\n    try {\n    \n      const { data } = await axios(`movie/${id}/reviews`, {\n        params: {\n          api_key: API_KEY,\n          language: language,\n        },\n      });\n      \n\n      return data;\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  }\n\n\n\n\n\n\n","import styled from \"styled-components\";\n\nexport const CastList = styled.ul`\n display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 16px 0 0 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`\nexport const Poster = styled.img`\n    width: 150px;\n    margin-bottom:10px;\n`\nexport const ListItem = styled.li`\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n`","import { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\";\n\nimport { fetchMovieCreditshById } from \"ApiServise/api.themoviedb\";\n\nimport {CastList, Poster, ListItem } from \"./Cast.styled\"\n\nconst Cast = () => {\n    const [cast, setCast] = useState(null)\n    const { movieId } = useParams()\n    console.log(movieId)\n    useEffect(() => {\n        async function getCast() {\n            try {\n                const response = await fetchMovieCreditshById(movieId)\n                setCast(response.cast)\n                \n            } catch (e) {\n                console.error(e)\n          }    \n       }\n       getCast()\n    }, [movieId]) \n    \n    if (!cast) return\n    return (\n        <CastList>\n            {cast && cast.map(c => {\n\n                const {profile_path, name, character} = c\n                let image =\n                    profile_path === null\n                    ? 'https://dummyimage.com/400x600/7d7d7d/fff.jpg&text=image+not+found'\n                        : `https://image.tmdb.org/t/p/w400/${profile_path}`;\n                            \n               return (\n                <ListItem key={name}>\n                    <Poster src={image} alt={name} />\n                       <span>{name}</span>\n                       <span>Character: {character}</span>\n                </ListItem>) \n            })}\n        </CastList>\n    )\n}\n\nexport default Cast"],"names":["API_KEY","language","axios","fetchTrendingMovies","page","signal","params","api_key","data","Error","message","fetchSearchMovie","searchQuery","query","results","fetchSearchMovieById","id","fetchMovieCreditshById","fetchMovieReviewsById","CastList","styled","Poster","ListItem","useState","cast","setCast","movieId","useParams","console","log","useEffect","response","error","getCast","map","c","profile_path","name","character","image","src","alt"],"sourceRoot":""}